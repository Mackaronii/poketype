{"version":3,"sources":["components/SectionHeader.jsx","components/Prompt.jsx","components/TypingForm.jsx","components/PromptTypingSection.jsx","App.js","index.js"],"names":["SectionHeader","props","state","wpm","acc","newProps","this","setState","Component","Prompt","promptWords","curWordIndex","correctIndices","wrongIndices","style","marginBottom","map","word","i","key","display","fontSize","color","includes","TypingForm","submitHandler","e","preventDefault","isDisabled","isDisbled","changeHandler","Form","onSubmit","Control","type","onChange","disabled","PromptTypingSection","generateNewPrompt","prompts","prompt","newPromptIndex","Math","floor","random","length","newPrompt","hasStarted","fact","split","isInputDisabled","curWord","retryPrompt","startTime","Date","now","console","log","curInput","target","value","isSpaceKeyPressed","curInputNoSpace","substr","compareWord","backgroundColor","isLastWord","inputWord","push","promptCompleted","endTime","durationSec","round","accuracy","toFixed","input","fetch","method","then","res","json","err","error","data","facts","Container","borderRadius","padding","textAlign","Button","variant","onClick","marginTop","marginLeft","App","paddingTop","paddingBottom","fontFamily","React","ReactDOM","render","document","getElementById"],"mappings":"gPA2BeA,E,YAxBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,IAAK,KACLC,IAAK,MALU,E,uFASOC,GACxBC,KAAKC,SAAS,CAAEJ,IAAKE,EAASF,IAAKC,IAAKC,EAASD,Q,+BAIjD,OACE,6BACE,mCACQE,KAAKJ,MAAMC,IADnB,WACgCG,KAAKJ,MAAME,U,GAlBvBI,aC+CbC,E,YA9Cb,WAAYR,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXQ,YAAaT,EAAMS,YACnBC,aAAcV,EAAMU,aACpBC,eAAgBX,EAAMW,eACtBC,aAAcZ,EAAMY,cANL,E,uFAUOR,GACxBC,KAAKC,SAAS,CACZG,YAAaL,EAASK,YACtBC,aAAcN,EAASM,aACvBC,eAAgBP,EAASO,eACzBC,aAAcR,EAASQ,iB,+BAIjB,IAAD,OACP,OACE,yBAAKC,MAAO,CAAEC,aAAc,SACzBT,KAAKJ,MAAMQ,YAAYM,KAAI,SAACC,EAAMC,GAAP,OAC1B,uBACEC,IAAKD,EACLJ,MAAO,CACLM,QAAS,SACTC,SAAU,OACVC,MACEJ,IAAM,EAAKhB,MAAMS,aACb,UACA,EAAKT,MAAMU,eAAeW,SAASL,GACnC,UACA,EAAKhB,MAAMW,aAAaU,SAASL,GACjC,UACA,SAGPD,EAAO,a,GAvCCT,a,QCkCNgB,E,YAhCb,WAAYvB,GAAQ,IAAD,8BACjB,4CAAMA,KAcRwB,cAAgB,SAAAC,GACdA,EAAEC,kBAbF,EAAKzB,MAAQ,CACX0B,WAAY3B,EAAM4B,WAGpB,EAAKC,cAAgB7B,EAAM6B,cAPV,E,uFAUOzB,GACxBC,KAAKC,SAAS,CAAEqB,WAAYvB,EAASuB,e,+BASrC,OACE,kBAACG,EAAA,EAAD,CAAMC,SAAU1B,KAAKmB,eACnB,kBAACM,EAAA,EAAKE,QAAN,CACEC,KAAK,OACLC,SAAU7B,KAAKwB,cACfM,SAAU9B,KAAKJ,MAAM0B,kB,GA1BNpB,a,QC+MV6B,E,YA1Mb,WAAYpC,GAAQ,IAAD,8BACjB,4CAAMA,KAgCRqC,kBAAoB,WAKlB,IALyB,IAAD,EACI,EAAKpC,MAAzBqC,EADgB,EAChBA,QAASC,EADO,EACPA,OAGbC,EAAiBC,KAAKC,MAAMD,KAAKE,SAAWL,EAAQM,QACjDL,EAAM,MAAYD,EAAQE,GAAR,KACvBA,EAAiBC,KAAKC,MAAMD,KAAKE,SAAWL,EAAQM,QAEtD,IAAMC,EAAYP,EAAQE,GAG1B,EAAKlC,SACH,CACEwC,YAAY,EACZP,OAAQM,EACRpC,YAAaoC,EAAUE,KAAKC,MAAM,KAClCtC,aAAc,EACdE,aAAc,GACdD,eAAgB,GAChBT,IAAK,KACLC,IAAK,KACL8C,iBAAiB,IAEnB,WACE,EAAK3C,SAAS,CAAE4C,QAAS,EAAKjD,MAAMQ,YAAY,SAzDnC,EA+DnB0C,YAAc,WACZ,EAAK7C,SAAS,CACZwC,YAAY,EACZI,QAAS,EAAKjD,MAAMQ,YAAY,GAChCC,aAAc,EACdE,aAAc,GACdD,eAAgB,GAChBT,IAAK,KACLC,IAAK,KACL8C,iBAAiB,KAxEF,EA4EnBpB,cAAgB,SAAAJ,GAEd,IAAK,EAAKxB,MAAM6C,WAAY,CAC1B,IAAMM,EAAYC,KAAKC,MACvB,EAAKhD,SAAS,CAAEwC,YAAY,EAAMM,UAAWA,IAC7CG,QAAQC,IAAR,yBAA8BJ,IAGhC,IAAMK,EAAWhC,EAAEiC,OAAOC,MAE1B,GAAI,EAAKC,kBAAkBH,GAAW,CAEpC,IAAMI,EAAkBJ,EAASK,OAAO,EAAGL,EAASb,OAAS,GAC7D,EAAKmB,YAAYF,GACjBpC,EAAEiC,OAAOC,MAAQ,GACjBlC,EAAEiC,OAAO7C,MAAMmD,gBAAkB,YACxB,EAAKC,WAAWR,IAEzB,EAAKM,YAAYN,GACjBhC,EAAEiC,OAAOC,MAAQ,IAGbF,IAAa,EAAKxD,MAAMiD,QAAQY,OAAO,EAAGL,EAASb,QACrDnB,EAAEiC,OAAO7C,MAAMmD,gBAAkB,UAEjCvC,EAAEiC,OAAO7C,MAAMmD,gBAAkB,QArGpB,EA0GnBD,YAAc,SAAAG,GAER,EAAKjE,MAAMiD,UAAYgB,EACzB,EAAKjE,MAAMU,eAAewD,KAAK,EAAKlE,MAAMS,cAE1C,EAAKT,MAAMW,aAAauD,KAAK,EAAKlE,MAAMS,cAI1C,EAAKJ,SAAS,CAAEI,aAAc,EAAKT,MAAMS,aAAe,IAAK,WACvD,EAAKT,MAAMS,aAAe,EAAKT,MAAMQ,YAAYmC,OACnD,EAAKtC,SAAS,CACZ4C,QAAS,EAAKjD,MAAMQ,YAAY,EAAKR,MAAMS,gBAG7C,EAAK0D,sBAzHQ,EA8HnBA,gBAAkB,WAEhB,IAAMC,EAAUhB,KAAKC,MACrBC,QAAQC,IAAR,uBAA4Ba,IAC5B,IACMC,GADaD,EAAU,EAAKpE,MAAMmD,WACP,IAG3BlD,EAAMuC,KAAK8B,MACd,EAAKtE,MAAMU,eAAeiC,OAAS0B,EAAe,IAM/CE,GAFa,EAAKvE,MAAMU,eAAeiC,OAC5B,EAAK3C,MAAMQ,YAAYmC,OACI,KAAK6B,QAAQ,GAAK,IAE9D,EAAKnE,SAAS,CAAE2C,iBAAiB,EAAM/C,IAAKA,EAAKC,IAAKqE,KA/IrC,EAmJnBZ,kBAAoB,SAAAc,GAClB,MAA0C,MAAnCA,EAAMZ,OAAOY,EAAM9B,OAAS,IApJlB,EAyJnBqB,WAAa,SAAAjD,GACX,OACE,EAAKf,MAAMS,eAAiB,EAAKT,MAAMQ,YAAYmC,OAAS,GAC5D5B,IAAS,EAAKf,MAAMiD,SAzJtB,EAAKjD,MAAQ,CACX6C,YAAY,EACZR,QAAS,GACTC,OAAQ,GACR9B,YAAa,GACbC,aAAc,EACdwC,QAAS,GACTtC,aAAc,GACdD,eAAgB,GAChBT,IAAK,KACLC,IAAK,KACL8C,iBAAiB,GAdF,E,iFAkBE,IAAD,OAElB0B,MAAM,8CAA+C,CACnDC,OAAQ,QAEPC,MACC,SAAAC,GAAG,OAAIA,EAAIC,UACX,SAAAC,GAAG,OAAIzB,QAAQ0B,MAAMD,MAEtBH,MAAK,SAAAK,GACJ,IAAMC,EAAQD,EAAKC,MACnB,EAAK7E,SAAS,CAAEgC,QAAS6C,IAAS,kBAAM,EAAK9C,4B,+BAoIjD,OACE,6BACE,kBAAC,EAAD,CAAenC,IAAKG,KAAKJ,MAAMC,IAAKC,IAAKE,KAAKJ,MAAME,MACpD,kBAACiF,EAAA,EAAD,CACEvE,MAAO,CACLmD,gBAAiB,UACjBqB,aAAc,OACdC,QAAS,OACTC,UAAW,SAGb,kBAAC,EAAD,CACE9E,YAAaJ,KAAKJ,MAAMQ,YACxBC,aAAcL,KAAKJ,MAAMS,aACzBC,eAAgBN,KAAKJ,MAAMU,eAC3BC,aAAcP,KAAKJ,MAAMW,eAE3B,kBAAC,EAAD,CACEiB,cAAexB,KAAKwB,cACpBF,WAAYtB,KAAKJ,MAAMgD,kBAEzB,kBAACuC,EAAA,EAAD,CACEC,QAAQ,UACRC,QAASrF,KAAKgC,kBACdxB,MAAO,CAAE8E,UAAW,SAHtB,gCAOA,kBAACH,EAAA,EAAD,CACEC,QAAQ,eACRC,QAASrF,KAAK8C,YACdtC,MAAO,CAAE8E,UAAW,OAAQC,WAAY,SAH1C,e,GA9LwBrF,aCgBnBsF,E,iLAhBX,OACE,kBAACT,EAAA,EAAD,CACEvE,MAAO,CACLiF,WAAY,OACZC,cAAe,OACfR,UAAW,SACXS,WAAY,YAGd,wBAAInF,MAAO,CAAEC,aAAc,SAA3B,eACA,kBAAC,EAAD,W,GAZUmF,IAAM1F,WCDxB2F,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.bce3f01f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass SectionHeader extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      wpm: \"XX\",\r\n      acc: \"XX\"\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(newProps) {\r\n    this.setState({ wpm: newProps.wpm, acc: newProps.acc });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>\r\n          WPM: {this.state.wpm} | ACC: {this.state.acc}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SectionHeader;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Prompt extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      promptWords: props.promptWords,\r\n      curWordIndex: props.curWordIndex,\r\n      correctIndices: props.correctIndices,\r\n      wrongIndices: props.wrongIndices\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(newProps) {\r\n    this.setState({\r\n      promptWords: newProps.promptWords,\r\n      curWordIndex: newProps.curWordIndex,\r\n      correctIndices: newProps.correctIndices,\r\n      wrongIndices: newProps.wrongIndices\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ marginBottom: \"20px\" }}>\r\n        {this.state.promptWords.map((word, i) => (\r\n          <p\r\n            key={i}\r\n            style={{\r\n              display: \"inline\",\r\n              fontSize: \"18px\",\r\n              color:\r\n                i === this.state.curWordIndex\r\n                  ? \"#D06AFF\"\r\n                  : this.state.correctIndices.includes(i)\r\n                  ? \"#69B23F\"\r\n                  : this.state.wrongIndices.includes(i)\r\n                  ? \"#D60000\"\r\n                  : \"#000\"\r\n            }}\r\n          >\r\n            {word + \" \"}\r\n          </p>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Prompt;\r\n","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nclass TypingForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isDisabled: props.isDisbled\r\n    };\r\n\r\n    this.changeHandler = props.changeHandler;\r\n  }\r\n\r\n  componentWillReceiveProps(newProps) {\r\n    this.setState({ isDisabled: newProps.isDisabled });\r\n  }\r\n\r\n  // Prevents [enter] key press from refreshing the page\r\n  submitHandler = e => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Form onSubmit={this.submitHandler}>\r\n        <Form.Control\r\n          type=\"text\"\r\n          onChange={this.changeHandler}\r\n          disabled={this.state.isDisabled}\r\n        />\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TypingForm;\r\n","import React, { Component } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport SectionHeader from \"./SectionHeader\";\r\nimport Prompt from \"./Prompt\";\r\nimport TypingForm from \"./TypingForm\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nclass PromptTypingSection extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      hasStarted: false,\r\n      prompts: [],\r\n      prompt: {},\r\n      promptWords: [],\r\n      curWordIndex: 0,\r\n      curWord: \"\",\r\n      wrongIndices: [],\r\n      correctIndices: [],\r\n      wpm: \"XX\",\r\n      acc: \"XX\",\r\n      isInputDisabled: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Get prompts and then generate a new prompt\r\n    fetch(\"https://poketype-api.herokuapp.com/v1/facts\", {\r\n      method: \"get\"\r\n    })\r\n      .then(\r\n        res => res.json(),\r\n        err => console.error(err)\r\n      )\r\n      .then(data => {\r\n        const facts = data.facts;\r\n        this.setState({ prompts: facts }, () => this.generateNewPrompt());\r\n      });\r\n  }\r\n\r\n  generateNewPrompt = () => {\r\n    const { prompts, prompt } = this.state;\r\n\r\n    // Generate a new prompt (cannot be the same as current prompt)\r\n    let newPromptIndex = Math.floor(Math.random() * prompts.length);\r\n    while (prompt[\"_id\"] === prompts[newPromptIndex][\"_id\"]) {\r\n      newPromptIndex = Math.floor(Math.random() * prompts.length);\r\n    }\r\n    const newPrompt = prompts[newPromptIndex];\r\n\r\n    // Set state for new prompt and enable input\r\n    this.setState(\r\n      {\r\n        hasStarted: false,\r\n        prompt: newPrompt,\r\n        promptWords: newPrompt.fact.split(\" \"),\r\n        curWordIndex: 0,\r\n        wrongIndices: [],\r\n        correctIndices: [],\r\n        wpm: \"XX\",\r\n        acc: \"XX\",\r\n        isInputDisabled: false\r\n      },\r\n      () => {\r\n        this.setState({ curWord: this.state.promptWords[0] });\r\n      }\r\n    );\r\n  };\r\n\r\n  // Reset the typing form for the same prompt\r\n  retryPrompt = () => {\r\n    this.setState({\r\n      hasStarted: false,\r\n      curWord: this.state.promptWords[0],\r\n      curWordIndex: 0,\r\n      wrongIndices: [],\r\n      correctIndices: [],\r\n      wpm: \"XX\",\r\n      acc: \"XX\",\r\n      isInputDisabled: false\r\n    });\r\n  };\r\n\r\n  changeHandler = e => {\r\n    // Set start time on first key press\r\n    if (!this.state.hasStarted) {\r\n      const startTime = Date.now();\r\n      this.setState({ hasStarted: true, startTime: startTime });\r\n      console.log(`Timer started: ${startTime}`);\r\n    }\r\n\r\n    const curInput = e.target.value;\r\n\r\n    if (this.isSpaceKeyPressed(curInput)) {\r\n      // [space] key pressed\r\n      const curInputNoSpace = curInput.substr(0, curInput.length - 1);\r\n      this.compareWord(curInputNoSpace);\r\n      e.target.value = \"\"; // Clear input control\r\n      e.target.style.backgroundColor = \"#FFF\";\r\n    } else if (this.isLastWord(curInput)) {\r\n      // Automatically push word without needing a [Space] press if last word\r\n      this.compareWord(curInput);\r\n      e.target.value = \"\"; // Clear input control\r\n    } else {\r\n      // Highlight the input field if the user's input is incorrect\r\n      if (curInput !== this.state.curWord.substr(0, curInput.length)) {\r\n        e.target.style.backgroundColor = \"#EE7878\";\r\n      } else {\r\n        e.target.style.backgroundColor = \"#FFF\";\r\n      }\r\n    }\r\n  };\r\n\r\n  compareWord = inputWord => {\r\n    // Check if input matches current word\r\n    if (this.state.curWord === inputWord) {\r\n      this.state.correctIndices.push(this.state.curWordIndex);\r\n    } else {\r\n      this.state.wrongIndices.push(this.state.curWordIndex);\r\n    }\r\n\r\n    // Get next word if prompt is incomplete\r\n    this.setState({ curWordIndex: this.state.curWordIndex + 1 }, () => {\r\n      if (this.state.curWordIndex < this.state.promptWords.length) {\r\n        this.setState({\r\n          curWord: this.state.promptWords[this.state.curWordIndex]\r\n        });\r\n      } else {\r\n        this.promptCompleted();\r\n      }\r\n    });\r\n  };\r\n\r\n  promptCompleted = () => {\r\n    // Get duration\r\n    const endTime = Date.now();\r\n    console.log(`Timer ended: ${endTime}`);\r\n    const durationMs = endTime - this.state.startTime;\r\n    const durationSec = durationMs / 1000;\r\n\r\n    // Get WPM (only counts correct words)\r\n    const wpm = Math.round(\r\n      (this.state.correctIndices.length / durationSec) * 60\r\n    );\r\n\r\n    // Get accuracy\r\n    const numCorrect = this.state.correctIndices.length;\r\n    const numTotal = this.state.promptWords.length;\r\n    const accuracy = ((numCorrect / numTotal) * 100).toFixed(2) + \"%\";\r\n\r\n    this.setState({ isInputDisabled: true, wpm: wpm, acc: accuracy });\r\n  };\r\n\r\n  // Returns true if the last character of input is a [space]\r\n  isSpaceKeyPressed = input => {\r\n    return input.substr(input.length - 1) === \" \";\r\n  };\r\n\r\n  // Returns true if the input matches the current word and\r\n  // the current word is the last word of the prompt\r\n  isLastWord = word => {\r\n    return (\r\n      this.state.curWordIndex === this.state.promptWords.length - 1 &&\r\n      word === this.state.curWord\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <SectionHeader wpm={this.state.wpm} acc={this.state.acc} />\r\n        <Container\r\n          style={{\r\n            backgroundColor: \"#ECECEC\",\r\n            borderRadius: \"10px\",\r\n            padding: \"30px\",\r\n            textAlign: \"left\"\r\n          }}\r\n        >\r\n          <Prompt\r\n            promptWords={this.state.promptWords}\r\n            curWordIndex={this.state.curWordIndex}\r\n            correctIndices={this.state.correctIndices}\r\n            wrongIndices={this.state.wrongIndices}\r\n          />\r\n          <TypingForm\r\n            changeHandler={this.changeHandler}\r\n            isDisabled={this.state.isInputDisabled}\r\n          />\r\n          <Button\r\n            variant=\"primary\"\r\n            onClick={this.generateNewPrompt}\r\n            style={{ marginTop: \"50px\" }}\r\n          >\r\n            Give me another Pok&#xe9;Fact!\r\n          </Button>\r\n          <Button\r\n            variant=\"outline-dark\"\r\n            onClick={this.retryPrompt}\r\n            style={{ marginTop: \"50px\", marginLeft: \"20px\" }}\r\n          >\r\n            Retry\r\n          </Button>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PromptTypingSection;\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport PromptTypingSection from \"./components/PromptTypingSection\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <Container\r\n        style={{\r\n          paddingTop: \"30px\",\r\n          paddingBottom: \"30px\",\r\n          textAlign: \"center\",\r\n          fontFamily: \"Verdana\"\r\n        }}\r\n      >\r\n        <h4 style={{ marginBottom: \"50px\" }}>Pok&#xe9;Type</h4>\r\n        <PromptTypingSection />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"app\"));\r\n"],"sourceRoot":""}