{"version":3,"sources":["components/SectionHeader.jsx","components/Prompt.jsx","components/TypingForm.jsx","components/Leaderboard.jsx","components/PromptTypingSection.jsx","App.js","index.js"],"names":["SectionHeader","props","state","wpm","acc","newProps","this","setState","Component","Prompt","promptWords","curWordIndex","correctIndices","wrongIndices","style","marginBottom","map","word","i","key","display","fontSize","color","includes","TypingForm","submitHandler","e","preventDefault","isDisabled","isDisbled","changeHandler","Form","onSubmit","Control","type","onChange","disabled","Leaderboard","leaderboard","Table","striped","bordered","hover","entry","PromptTypingSection","generateNewPrompt","prompts","prompt","newPromptIndex","Math","floor","random","length","newPrompt","hasStarted","fact","split","isInputDisabled","isLeaderboardVisible","curWord","retryPrompt","startTime","Date","now","console","log","curInput","target","value","isSpaceKeyPressed","curInputNoSpace","substr","compareWord","backgroundColor","isLastWord","inputWord","push","promptCompleted","endTime","durationSec","round","numCorrect","numTotal","parseFloat","toFixed","submitLeaderboardEntry","then","getPokeFactLeaderboardById","pokefact_leaderboard","input","getAllPokeFacts","facts","fetch","method","res","json","err","error","id","date","username","pokeFactId","headers","Connection","body","JSON","stringify","Container","borderRadius","padding","textAlign","Button","variant","onClick","marginTop","marginLeft","App","paddingTop","paddingBottom","fontFamily","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1eec2ca2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass SectionHeader extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      wpm: \"XX\",\r\n      acc: \"XX\"\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(newProps) {\r\n    this.setState({ wpm: newProps.wpm, acc: newProps.acc });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>\r\n          WPM: {this.state.wpm} | ACC: {this.state.acc}%\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SectionHeader;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Prompt extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      promptWords: props.promptWords,\r\n      curWordIndex: props.curWordIndex,\r\n      correctIndices: props.correctIndices,\r\n      wrongIndices: props.wrongIndices\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(newProps) {\r\n    this.setState({\r\n      promptWords: newProps.promptWords,\r\n      curWordIndex: newProps.curWordIndex,\r\n      correctIndices: newProps.correctIndices,\r\n      wrongIndices: newProps.wrongIndices\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ marginBottom: \"20px\" }}>\r\n        {this.state.promptWords.map((word, i) => (\r\n          <p\r\n            key={i}\r\n            style={{\r\n              display: \"inline\",\r\n              fontSize: \"18px\",\r\n              color:\r\n                i === this.state.curWordIndex\r\n                  ? \"#D06AFF\"\r\n                  : this.state.correctIndices.includes(i)\r\n                  ? \"#69B23F\"\r\n                  : this.state.wrongIndices.includes(i)\r\n                  ? \"#D60000\"\r\n                  : \"#000\"\r\n            }}\r\n          >\r\n            {word + \" \"}\r\n          </p>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Prompt;\r\n","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nclass TypingForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isDisabled: props.isDisbled\r\n    };\r\n\r\n    this.changeHandler = props.changeHandler;\r\n  }\r\n\r\n  componentWillReceiveProps(newProps) {\r\n    this.setState({ isDisabled: newProps.isDisabled });\r\n  }\r\n\r\n  // Prevents [enter] key press from refreshing the page\r\n  submitHandler = e => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Form onSubmit={this.submitHandler}>\r\n        <Form.Control\r\n          type=\"text\"\r\n          onChange={this.changeHandler}\r\n          disabled={this.state.isDisabled}\r\n        />\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TypingForm;\r\n","import React, { Component } from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nfunction Leaderboard(props) {\r\n  const leaderboard = props.leaderboard;\r\n\r\n  return (\r\n    <Table striped bordered hover>\r\n      <thead>\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Username</th>\r\n          <th>WPM</th>\r\n          <th>ACC (%)</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {leaderboard.map((entry, i) => (\r\n          <tr key={i}>\r\n            <td>{entry[\"date\"]}</td>\r\n            <td>{entry[\"username\"]}</td>\r\n            <td>{entry[\"wpm\"]}</td>\r\n            <td>{entry[\"acc\"]}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n}\r\n\r\nexport default Leaderboard;\r\n","import React, { Component } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport SectionHeader from \"./SectionHeader\";\r\nimport Prompt from \"./Prompt\";\r\nimport TypingForm from \"./TypingForm\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Leaderboard from \"./Leaderboard\";\r\n\r\nclass PromptTypingSection extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      hasStarted: false,\r\n      prompts: [],\r\n      prompt: {},\r\n      promptWords: [],\r\n      curWordIndex: 0,\r\n      curWord: \"\",\r\n      wrongIndices: [],\r\n      correctIndices: [],\r\n      wpm: \"XX\",\r\n      acc: \"XX\",\r\n      isInputDisabled: false,\r\n      isLeaderboardVisible: false\r\n    };\r\n  }\r\n\r\n  // Get prompts and then generate a new prompt\r\n  componentDidMount() {\r\n    this.getAllPokeFacts().then(facts =>\r\n      this.setState({ prompts: facts }, () => this.generateNewPrompt())\r\n    );\r\n  }\r\n\r\n  // Get all PokeFacts\r\n  getAllPokeFacts() {\r\n    const promise = fetch(\"https://poketype-api.herokuapp.com/v1/pokefacts\", {\r\n      method: \"GET\"\r\n    })\r\n      .then(\r\n        res => res.json(),\r\n        err => console.error(err)\r\n      )\r\n      .then(json => {\r\n        return json[\"pokefacts\"];\r\n      });\r\n\r\n    return promise;\r\n  }\r\n\r\n  // Submit entry to the leaderboard of the given prompt\r\n  submitLeaderboardEntry(id, date, username, wpm, acc) {\r\n    const entry = {\r\n      pokeFactId: id,\r\n      date: date,\r\n      username: username,\r\n      wpm: wpm,\r\n      acc: acc\r\n    };\r\n\r\n    const promise = fetch(\r\n      `https://poketype-api.herokuapp.com/v1/pokefact_leaderboards`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Connection: \"keep-alive\"\r\n        },\r\n        body: JSON.stringify(entry)\r\n      }\r\n    ).then(res => console.log(res));\r\n\r\n    return promise;\r\n  }\r\n\r\n  // Get all PokeFact leaderboard entries\r\n  getAllPokeFactLeaderboards() {\r\n    const promise = fetch(\r\n      `https://poketype-api.herokuapp.com/v1/pokefact_leaderboards`,\r\n      {\r\n        method: \"GET\"\r\n      }\r\n    )\r\n      .then(\r\n        res => res.json(),\r\n        err => console.error(err)\r\n      )\r\n      .then(json => {\r\n        const leaderboard = json[\"pokefact_leaderboard\"];\r\n        console.log(leaderboard);\r\n        return leaderboard;\r\n      });\r\n\r\n    return promise;\r\n  }\r\n\r\n  // Get PokeFact leaderboard by ID\r\n  getPokeFactLeaderboardById(id) {\r\n    const promise = fetch(\r\n      `https://poketype-api.herokuapp.com/v1/pokefact_leaderboards?id=${id}`,\r\n      {\r\n        method: \"GET\"\r\n      }\r\n    )\r\n      .then(\r\n        res => res.json(),\r\n        err => console.error(err)\r\n      )\r\n      .then(json => {\r\n        const leaderboard = json[\"pokefact_leaderboard\"];\r\n        console.log(leaderboard);\r\n        return leaderboard;\r\n      });\r\n\r\n    return promise;\r\n  }\r\n\r\n  generateNewPrompt = () => {\r\n    const { prompts, prompt } = this.state;\r\n\r\n    // Generate a new prompt (cannot be the same as current prompt)\r\n    let newPromptIndex = Math.floor(Math.random() * prompts.length);\r\n    while (prompt[\"_id\"] === prompts[newPromptIndex][\"_id\"]) {\r\n      newPromptIndex = Math.floor(Math.random() * prompts.length);\r\n    }\r\n    const newPrompt = prompts[newPromptIndex];\r\n\r\n    // Set state for new prompt and enable input\r\n    this.setState(\r\n      {\r\n        hasStarted: false,\r\n        prompt: newPrompt,\r\n        promptWords: newPrompt.fact.split(\" \"),\r\n        curWordIndex: 0,\r\n        wrongIndices: [],\r\n        correctIndices: [],\r\n        wpm: \"XX\",\r\n        acc: \"XX\",\r\n        isInputDisabled: false,\r\n        isLeaderboardVisible: false\r\n      },\r\n      () => {\r\n        this.setState({ curWord: this.state.promptWords[0] });\r\n      }\r\n    );\r\n  };\r\n\r\n  // Reset the typing form for the same prompt\r\n  retryPrompt = () => {\r\n    this.setState({\r\n      hasStarted: false,\r\n      curWord: this.state.promptWords[0],\r\n      curWordIndex: 0,\r\n      wrongIndices: [],\r\n      correctIndices: [],\r\n      wpm: \"XX\",\r\n      acc: \"XX\",\r\n      isInputDisabled: false\r\n    });\r\n  };\r\n\r\n  changeHandler = e => {\r\n    // Set start time on first key press\r\n    if (!this.state.hasStarted) {\r\n      const startTime = Date.now();\r\n      this.setState({ hasStarted: true, startTime: startTime });\r\n      console.log(`Timer started: ${startTime}`);\r\n    }\r\n\r\n    const curInput = e.target.value;\r\n\r\n    if (this.isSpaceKeyPressed(curInput)) {\r\n      // [space] key pressed\r\n      const curInputNoSpace = curInput.substr(0, curInput.length - 1);\r\n      this.compareWord(curInputNoSpace);\r\n      e.target.value = \"\"; // Clear input control\r\n      e.target.style.backgroundColor = \"#FFF\";\r\n    } else if (this.isLastWord(curInput)) {\r\n      // Automatically push word without needing a [Space] press if last word\r\n      this.compareWord(curInput);\r\n      e.target.value = \"\"; // Clear input control\r\n    } else {\r\n      // Highlight the input field if the user's input is incorrect\r\n      if (curInput !== this.state.curWord.substr(0, curInput.length)) {\r\n        e.target.style.backgroundColor = \"#EE7878\";\r\n      } else {\r\n        e.target.style.backgroundColor = \"#FFF\";\r\n      }\r\n    }\r\n  };\r\n\r\n  compareWord = inputWord => {\r\n    // Check if input matches current word\r\n    if (this.state.curWord === inputWord) {\r\n      this.state.correctIndices.push(this.state.curWordIndex);\r\n    } else {\r\n      this.state.wrongIndices.push(this.state.curWordIndex);\r\n    }\r\n\r\n    // Get next word if prompt is incomplete\r\n    this.setState({ curWordIndex: this.state.curWordIndex + 1 }, () => {\r\n      if (this.state.curWordIndex < this.state.promptWords.length) {\r\n        this.setState({\r\n          curWord: this.state.promptWords[this.state.curWordIndex]\r\n        });\r\n      } else {\r\n        this.promptCompleted();\r\n      }\r\n    });\r\n  };\r\n\r\n  promptCompleted = () => {\r\n    // Get duration\r\n    const endTime = Date.now();\r\n    console.log(`Timer ended: ${endTime}`);\r\n    const durationMs = endTime - this.state.startTime;\r\n    const durationSec = durationMs / 1000;\r\n\r\n    // Get WPM (only counts correct words)\r\n    const wpm = Math.round(\r\n      (this.state.correctIndices.length / durationSec) * 60\r\n    );\r\n\r\n    // Get accuracy\r\n    const numCorrect = this.state.correctIndices.length;\r\n    const numTotal = this.state.promptWords.length;\r\n    const acc = parseFloat(((numCorrect / numTotal) * 100).toFixed(2));\r\n\r\n    this.setState({ isInputDisabled: true, wpm: wpm, acc: acc }, () => {\r\n      // First, post PokeFact leaderboard entry\r\n      this.submitLeaderboardEntry(\r\n        this.state.prompt[\"_id\"],\r\n        new Date(),\r\n        \"test_user\",\r\n        wpm,\r\n        acc\r\n      )\r\n        // Then get the PokeFact leaderboard for the current prompt\r\n        .then(() => this.getPokeFactLeaderboardById(this.state.prompt[\"_id\"]))\r\n        .then(pokefact_leaderboard =>\r\n          this.setState({\r\n            pokefact_leaderboard: pokefact_leaderboard,\r\n            isLeaderboardVisible: true\r\n          })\r\n        );\r\n    });\r\n  };\r\n\r\n  // Returns true if the last character of input is a [space]\r\n  isSpaceKeyPressed = input => {\r\n    return input.substr(input.length - 1) === \" \";\r\n  };\r\n\r\n  // Returns true if the input matches the current word and\r\n  // the current word is the last word of the prompt\r\n  isLastWord = word => {\r\n    return (\r\n      this.state.curWordIndex === this.state.promptWords.length - 1 &&\r\n      word === this.state.curWord\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <SectionHeader wpm={this.state.wpm} acc={this.state.acc} />\r\n        <Container\r\n          style={{\r\n            backgroundColor: \"#ECECEC\",\r\n            borderRadius: \"10px\",\r\n            padding: \"30px\",\r\n            textAlign: \"left\"\r\n          }}\r\n        >\r\n          <Prompt\r\n            promptWords={this.state.promptWords}\r\n            curWordIndex={this.state.curWordIndex}\r\n            correctIndices={this.state.correctIndices}\r\n            wrongIndices={this.state.wrongIndices}\r\n          />\r\n          <TypingForm\r\n            changeHandler={this.changeHandler}\r\n            isDisabled={this.state.isInputDisabled}\r\n          />\r\n          <Button\r\n            variant=\"primary\"\r\n            onClick={this.generateNewPrompt}\r\n            style={{ marginTop: \"50px\" }}\r\n          >\r\n            Give me another Pok&#xe9;Fact!\r\n          </Button>\r\n          <Button\r\n            variant=\"outline-dark\"\r\n            onClick={this.retryPrompt}\r\n            style={{ marginTop: \"50px\", marginLeft: \"20px\" }}\r\n          >\r\n            Retry\r\n          </Button>\r\n          {this.state.isLeaderboardVisible ? (\r\n            <Leaderboard leaderboard={this.state.pokefact_leaderboard} />\r\n          ) : (\r\n            <p style={{ marginTop: \"50px\", textAlign: \"center\" }}>\r\n              Complete the PokeFact above to view its leaderboards!\r\n            </p>\r\n          )}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PromptTypingSection;\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport PromptTypingSection from \"./components/PromptTypingSection\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <Container\r\n        style={{\r\n          paddingTop: \"30px\",\r\n          paddingBottom: \"30px\",\r\n          textAlign: \"center\",\r\n          fontFamily: \"Verdana\"\r\n        }}\r\n      >\r\n        <h4 style={{ marginBottom: \"50px\" }}>Pok&#xe9;Type</h4>\r\n        <PromptTypingSection />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"app\"));\r\n"],"sourceRoot":""}